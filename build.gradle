buildscript {
    apply from:"common.gradle"

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.2"
    id "maven-publish"
}

group 'com.maeharin'
version factlin_version

apply plugin: 'kotlin'
apply plugin: 'jacoco'


repositories {
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // for as gradle plugin
    compile gradleApi()

    // template engine
    compile "org.freemarker:freemarker:$freemarker_version"

    // log
    compile "org.slf4j:slf4j-api:$slf4_version"

    // junit5
    testCompile("org.junit.jupiter:junit-jupiter-api:$junit5_version")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit5_version")
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.maeharin'
            artifactId 'factlin'
            version factlin_version
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']

    pkg {
        repo = 'factlin'
        name = 'factlin'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/maeharin/factlin'
        version {
            name = factlin_version
            desc = 'Kotlin test fixture generator from existing database schema'
        }
        publish = true // auto publish
    }
    //configurations = ['archives']
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport
